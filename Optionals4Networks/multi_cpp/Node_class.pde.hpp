/// @file
#pragma once
/// @date 2024-10-21 (last modification)
#ifndef HEADER_Node_INCLUDED
#define HEADER_Node_INCLUDED

/**
* @brief Abstraction class for any network node.
*/

#include "iNode_class.pde.hpp"

#include "Positioned_class.pde.hpp"
//Base class is now:
#define _superclass _

/// @note Automatically extracted definition of `class`: Node

//_endOfSuperClass; // Now will change of superclass!
//Base class is now:
#define _superclass _
//_derivedClass:Node

//abstract
class Node : public  Positioned, public virtual iNode , public virtual Object{
  public:

  virtual  int      addConn(piLink   l){assert(false );	//  String("Pure virtual  addConn(Link ")+l+ String(") called");
 	return    -1;}
  virtual  int      delConn(piLink   l){assert(false );	//  String("Pure virtual  delConn(Link ")+l+ String(") called");
 	return    -1;}
  virtual  int      numOfConn()       {
	assert(false );	//  "Pure virtual  numOfConn() called";
 	return    -1;
	}
  virtual  piLink    getConn(int    i) {
	assert(false );	//  String("Pure virtual  getConn(int ")+i+ String(")  called");
 	return  nullptr;
	}
  virtual  piLink    getConn(piNode   n){assert(false );	//  String("Pure virtual  getConn(Node ")+n+ String(") called");
 	return  nullptr;}
  virtual  piLink    getConn(String k) {
	assert(false );	//  String("Pure virtual  getConn(String '")+k+ String("') called");
 	return  nullptr;
	}
  virtual  sarray<piLink>  getConns(piLinkFilter f)
                  {
	 assert(false );	//  String("Pure virtual  getConns(LinkFilter ")+f+ String(") called");
 	return  nullptr;
	}
} ; //_EndOfClass


//Undefining any base class preprocessor definition: _
#undef _superclass

/// Generated by Processing2C++ extraction Tools
#endif //HEADER_Node_INCLUDED

//MADE NOTE: /data/wb/SCC/public/Processing2C/scripts did it 2024-10-21 19:06:46 !

